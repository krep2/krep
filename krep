#!/usr/bin/env python

import os
import sys

from dir_utils import AutoChangedDir
from krep_subcmds import all_commands
from options import OptionParser, OptionValueError, Values
from synchronize import synchronized
from topics import ConfigFile, Debug, FileUtils, KrepError, Logger


VERSION = '0.3'

if sys.version_info[0] < 3:
    reload(sys)
    sys.setdefaultencoding('utf-8')  # pylint: disable=E1101

def _global_options(cmd=None):
    global_options = OptionParser(usage='''\
%prog [OPTIONS] subcmd ...

Execute the specified sub-commands, which can be listed with the command
"%prog help"''', version=VERSION)

    # File options
    group = global_options.add_option_group('Global file options')
    group.add_option(
        '-w', '--working-dir',
        dest='working_dir', action='store', metavar='DIR', default=os.getcwd(),
        help='Set the working directory. default: %default')
    group.add_option(
        '--current-dir',
        dest='current_dir', action='store', metavar='DIR', default=os.getcwd(),
        help=global_options.SUPPRESS_HELP)
    group.add_option(
        '--relative-dir',
        dest='relative_dir', action='store', metavar='DIR',
        help=global_options.SUPPRESS_HELP)

    # Debug options
    group = global_options.add_option_group('Global debugging options')
    group.add_option(
        '-T', '--dryrun',
        dest='dryrun', action='store_true', default=False,
        help='try running the command without actual execution of commands')
    group.add_option(
        '-d', '--debug',
        dest='debug', action='store', metavar='ITEM,ITEM,...',
        help='set to debug the function')
    group.add_option(
        '-v', '--verbose',
        dest='verbose', action='count', default=0,
        help='set repeatedly to output debugging info')

    # Other options
    group = global_options.add_option_group('Global other options')
    group.add_option(
        '--force',
        dest='force', action='store_true', default=False,
        help='force to execute the operations')

    if cmd is None or cmd.support_inject():
        group.add_option(
            '--inject-option',
            dest='inject_option', action='append',
            help='extra options passed to running sub-command with the '
                 'format group:[--]option[=value]')

    return global_options


_default_option = None  # pylint: disable=C0103


@synchronized
def _load_default_option():
    def _loadconf(confname):
        if os.path.exists(confname):
            return ConfigFile(confname).get_default()
        else:
            return Values()

    global _default_option  # pylint: disable=C0103,W0603
    if _default_option is None:
        opts = Values()
        opts.join(_loadconf('/etc/default/krepconfig'), origin='file')
        opts.join(_loadconf(os.path.expanduser('~/.krepconfig')), origin='file')

        _default_option = opts

    return _default_option


def _option_parse(argv):
    name = None
    for i in range(len(argv)):
        if not argv[i].startswith('-'):
            name = argv[i]
            del argv[i]
            break

    cmd = None
    if name:
        try:
            cmd = all_commands[name]
            cmd.COMMAND = name
        except KeyError:
            print('Error: Sub-command "%s" is unknown to the program' % name)
            sys.exit(1)

        options = cmd.get_option_parser(_global_options(cmd))
    else:
        options = _global_options()

    return name, argv, cmd, options


def _get_named_command(name):
    return all_commands.get(name)


def _get_named_options(name):
    _, _, _, optparse = _option_parse([name])
    return optparse


def run(name, opts, args, optparse=None,   # pylint: disable=R0913,R0914,R0915
        defopts=None, ignore_except=False):
    logger = Logger.get_logger(name)

    lopts = Values(opts)
    try:
        cmd = all_commands[name]
        cmd._run = run  # pylint: disable=W0212
        cmd._cmd = _get_named_command  # pylint: disable=W0212
        cmd._cmdopt = _get_named_options  # pylint: disable=W0212

        logger = cmd.get_logger(
            name=cmd.get_name(lopts), verbose=lopts.pop('verbose') or 0)

        # sub-command
        if optparse is None:
            _, _, _, optparse = _option_parse([name])
            ops, _ = optparse.parse_args([])
            # re-estimate opts again
            lopts = Values()
            lopts.join(opts, option=optparse)

            lopts.join(ops, option=optparse, override=False, origin='cmdline')
            optparse.join(lopts)

            # inject options
            injects = lopts.extra(lopts.inject_option, name) + \
                      lopts.extra(lopts.inject_option)
            for opt in injects:
                cindex = opt.find(':')
                if cindex > 0:
                    eindex = opt.find('=')
                    sindex = opt.find(' ')

                    # colon is in the option value, ignore
                    if 0 < eindex < cindex or 0 < sindex < cindex:
                        pass
                    else:
                        cname, opt = opt.split(':', 1)
                        if cname in all_commands and cname != name:
                            continue

                if not opt.startswith('-'):
                    opt = '--%s' % opt

                try:
                    ops, _ = optparse.parse_args(
                        OptionParser.split_argument(opt), inject=True)
                    lopts.join(ops, optparse, origin='inject')
                except TypeError:
                    pass

        if defopts is None:
            defopts = _load_default_option()

        lopts.join(defopts, optparse, override=False)
        with AutoChangedDir(
                FileUtils.ensure_path(
                    lopts.working_dir, lopts.relative_dir, exists=False),
                cleanup=False):
            Debug.dump_options(lopts)
            cmd.execute(lopts, *args)
    except KeyError:
        if ignore_except:
            print('Error: Sub-command "%s" is unknown to the program' % name)
        else:
            raise
    except KrepError as e:
        logger.error(e)
    except Exception as e:  # pylint: disable=W0703
        if ignore_except:
            logger.error(e)
        else:
            raise


def main(argv):
    dopts = _load_default_option()
    Logger.set(verbose=dopts.verbose or 0)

    logger = Logger.get_logger()
    name, argv, cmd, options = _option_parse(argv)
    try:
        opts, args = options.parse_args(argv)
    except OptionValueError as e:
        options.error(e)
        sys.exit(1)

    # correct the verbose follow the final settings
    verbose = opts.pop('verbose')
    if verbose > -1:
        Logger.set(verbose=verbose)

    if not cmd:
        logger.debug('Exited without sub-command')
        sys.exit(1)

    run(name, opts, args, options, dopts)


if __name__ == '__main__':
    main(sys.argv[1:])
