#!/usr/bin/env python

import os
import sys

from dir_utils import AutoChangedDir
from krep_subcmds import all_commands
from options import OptionParser, OptionValueError, Values
from topics import ConfigFile, KrepError, Logger


def _global_options(cmd=None):
    global_options = OptionParser(usage='''\
%prog [OPTIONS] subcmd ...

Execute the specified sub-commands, which can be listed with the command
"%prog help"''')

    # File options
    group = global_options.add_option_group('Global file options')
    group.add_option(
        '-w', '--working-dir',
        dest='working_dir', metavar='WORKING_DIR', default=os.getcwd(),
        help='Set the working directory, or current directory would be used. '
             'default: %default')

    # Debug options
    group = global_options.add_option_group('Global debugging options')
    group.add_option(
        '-T', '--tryrun',
        dest='tryrun', action='store_true', default=False,
        help='try running the command without actual changes to the local '
             'repository and the remote server')
    group.add_option(
        '-v', '--verbose',
        dest='verbose', action='count', default=-1,
        help='set repeatedly to output debug info')

    # Other options
    group = global_options.add_option_group('Global other options')
    group.add_option(
        '--force',
        dest='force', action='store_true', default=False,
        help='force to execute the operations')
    if cmd is None or cmd.support_inject():
        group.add_option(
            '--inject-option',
            dest='inject_option', action='append',
            help='inject implict sub-command options. The format could be '
                 '[cmd:][--]inject-option')

    return global_options


def get_command(name):
    return all_commands.get(name)


def run(name, opts, args, optparse=None, ignore_except=False):
    logger = Logger.get_logger(name)

    lopts = Values(opts)
    try:
        cmd = all_commands[name]
        cmd._run = run  # pylint: disable=W0212
        cmd._cmd = get_command  # pylint: disable=W0212

        logger = Logger.set(
            verbose=lopts.exude('verbose'), name=cmd.get_name(lopts))

        # sub-command
        if optparse is None:
            _, _, _, optparse = _option_parse([name], logger)
            ops, _ = optparse.parse_args([])
            lopts.join(ops, option=optparse)
            optparse.join(lopts)

            # inject options
            for opt in lopts.exude('inject_option') or list():
                if opt.find(':') > 0:
                    oname = opt[:opt.find(':')]
                    if oname in all_commands and oname != name:
                        continue

                if opt.startswith('%s:' % name):
                    opt = opt[len(name) + 1:]
                if not opt.startswith('-'):
                    opt = '--%s' % opt

                try:
                    ops, _ = optparse.parse_args([opt], inject=True)
                    lopts.join(ops)
                except TypeError:
                    pass

        if lopts.working_dir != os.getcwd():
            logger.debug('chdir: %s', lopts.working_dir)

        with AutoChangedDir(lopts.working_dir, cleanup=False):
            cmd.execute(lopts, *args)
    except KeyError:
        if ignore_except:
            logger.error('Sub-command is unknown to the program')
        else:
            raise
    except KrepError, e:
        logger.error(e)
    except Exception, e:  # pylint: disable=W0703
        if ignore_except:
            logger.error(e)
        else:
            raise


def _option_parse(argv, logger):
    name = None
    for i in range(len(argv)):
        if not argv[i].startswith('-'):
            name = argv[i]
            del argv[i]
            break

    cmd = None
    if name:
        try:
            cmd = all_commands[name]
            cmd.COMMAND = name
        except KeyError:
            logger.error('Error: Sub-command "%s" is unknown to the program',
                         name)
            sys.exit(1)

        options = cmd.get_option_parser(_global_options(cmd))
    else:
        options = _global_options()

    return name, argv, cmd, options


def main(argv):
    opts = Values()
    localconf = os.path.expanduser('~/.krepconfig')
    if os.path.exists(localconf):
        conf = ConfigFile(localconf)
        opts.join(conf.get_default())

    Logger.set(level=Logger.ERROR, verbose=opts.verbose)

    logger = Logger.get_logger()
    name, argv, cmd, options = _option_parse(argv, logger)
    try:
        optv, args = options.parse_args(argv)
    except OptionValueError, e:
        options.error(e)
        sys.exit(1)

    opts.join(optv, option=options)
    # correct the verbose follow the final settings
    verbose = opts.exude('verbose')
    if verbose > -1:
        Logger.set(verbose=verbose)

    if not cmd:
        logger.debug('Exited without sub-command')
        sys.exit(1)

    run(name, opts, args, options)


if __name__ == '__main__':
    main(sys.argv[1:])
